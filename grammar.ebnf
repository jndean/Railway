
module = {import} {let_stmt} {function} ;

import = "import" string ["as" [name]] ;

function = "func" name "(" [name {","  name}] ")"
                       "(" [name {","  name}] ")" "\n"
           {statement}
           "return" "(" [name {","  name}] ")" ;

statement = [let_stmt | unlet_stmt | if_stmt | loop_stmt | for_stmt |
             push_stmt | pop_stmt | swap_stmt | do_stmt | mod_stmt |
             try_stmt | catch_stmt | call_stmt | print_stmt | promote_stmt |
	     barrier_stmt] "\n" ;

let_stmt = "let" lookup "=" expression ;

unlet_stmt = "unlet" lookup "=" expression ;

push_stmt = "push" (lookup "=>" lookup) | (lookup "<=" lookup) ;

pop_stmt = "pop" (lookup "<=" lookup) | (lookup "=>" lookup) ;

swap_stmt = "swap" lookup "<=>" lookup ;

if_stmt = "if" "(" expression ")" "\n"
           {statement}
           ["else" "\n" {statement}]
           "fi" ["(" expression ")"] ;

loop_stmt = "loop" "(" expression ")" "\n"
            {statement}
            "pool" "(" expression ")" ;

for_stmt = "for" "(" name "in" expression ")" "\n"
            {statement}
            "rof" "(" name "in" expression ")" ;

do_stmt = "do" "\n"
          {statement}
          "yield" "\n"
          {yieldable_stmt}
          "undo" ;

barrier_stmt = "barrier" string ;

try_stmt = "try" "(" basic_name "in" expression ")" "\n"
           {statement}
           "yrt" ;

catch_stmt = "catch" "(" expression ")" ;

promote_stmt = "promote" name ;

mod_stmt = lookup modification_op expression ;

print_stmt = "print" "(" (lookup | string) {"," (lookup | string)} ")" ;

call_block = ("call" | "uncall") name ["{" expression "}"]
             "(" name {"," name} ")" ;
call_chain_right = call_block {">" call_block} ;
call_chain_left  = call_block {"<" call_block} ;
call_stmt = ["(" name {"," name} ")" "=>"] call_chain_right
                ["=>" "(" name {"," name} ")"]
          | ["(" name {"," name} ")" "<="] call_chain_left
                ["<=" "(" name {"," name} ")"] ;

array_generator = "[" expression "for" name "in" expression "]"
                | "[" expression "to" expression [ "by" expression ] "]" ;

array_literal = "[" [expression {"," expression}] "]" ;

array_tensor = "[" expression "tensor" expression "]" ;

lookup = name {"[" expression "]"} ;

expression = number
           | ['#'] lookup
           | unary_op expression
           | expression binary_op expression
           | '(' expression ')'
           | array_literal
           | array_generator
           | array_tensor
	   | threadnum ;

threadnum = "TID"

binary_op = "+" | "-" | "*" | "/" | "//" | "**" | "%" |
            "^" | "|" | "&" | "<=" | ">=" | "!=" | "==" |
            "<" | ">" ;

modification_op = "+=" | "-=" | "*=" | "/=" | "//=" | "**=" |
                  "%=" | "^=" | "|=" | "&=" | "=" ;
	    
unary_op = "!" | "-" ;

name = ['.'] basic_name ;

basic_name = "[a-zA-Z_][a-zA-Z0-9_.]*" ;

string = "\"[^\"]*\"" ;

number = "\d+(\/\d+)?" ;