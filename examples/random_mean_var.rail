$
USAGE:
 python railway.py examples/random_mean_var.railway

This program uses a cyclic shift register to generate an array of random
numbers. CCRs are designed around fast register ops on CPUs, and are really
badly suited to the reversible operations on arbitrary precision rationals used
in railway. Hence the random function has an awkward pattern where it pops a
bit, computes the new bit, then undoes the new bit computation to figure out how
to uninitialise the old bit. It also uses a helper function to translate between
rationals and a bit array, which carefully consumes its inputs to limit how much
information is in scope to be cleaned up later.

Once it has generated random numbers, it demonstrates a multithreaded algorithm
to compute the mean and variance in parallel, with mutexes and barriers.
$

func main(argv)()
    do
        $ Generate an array of pseudo-random 16-bit numbers $
        let state = 61899
        let array = []
        for (_ in [0 to 100])
            (state) => call random() => (state)
            let value = 17 + (state - 2**15) / 1000
            push value => array
        rof

        $ Compute the mean and variance with 4 threads $
        let mean
        let variance
        let n_threads = 4
        call parallel_mean_var{n_threads}(array, mean, variance)
    yield
        println('Random array:', array)
        println('Mean:', mean, ', Variance:', variance)
    undo
return ()


$ -------------------------- Parallel mean var -------------------------- $

func parallel_mean_var(array, mean, variance)()
    do
        $ Each thread determines which elements it will sum $
        let width = (#array + #TID - 1) // #TID
        let start = TID * width
        if (TID == #TID - 1)
            let end = #array
        else
            let end = start + width
        fi ()
    yield
        call mean(array, mean, start, end)
        $ Make sure all threads finish mean before using it for variance $
        barrier 'mean done'
        call variance(array, mean, variance, start, end)
    undo
return ()


func mean(array, mean, start, end)()
    do
        let sum
        for (i in [start to end])
            sum += array[i]
        rof
    yield
        mutex 'mean'
            mean += sum
        xetum
    undo

    $ Thread 0 normalises once all threads are done summing $
    barrier 'mean'
    if (TID == 0)
        mean /= #array
    fi ()
return ()


func variance(array, mean, variance, start, end)()
    do
        let sum
        for (i in [start to end])
            sum += (array[i] - mean) ** 2
        rof
    yield
        mutex 'variance'
            variance += sum
        xetum
    undo

    $ Thread 0 normalises once all threads are done summing $
    barrier 'variance'
    if (TID == 0)
        variance /= #array
    fi ()
return ()


$ -------------------------------- Random ------------------------------- $

$ Consumes state, spits out new state $
func random()(state)
    (state) => call numTo16Bits() => (bits)
    pop bits => bit
    let newbit = bits[10] ^ bits[12] ^ bits[13] ^ bit
    unlet bit = bits[10] ^ bits[12] ^ bits[13] ^ newbit
    let padding = 0
    push padding => bits    
    (state) <= uncall numTo16Bits() <= (bits)
    state *= 2
    state += newbit
    unlet newbit = state % 2
return (state)


$ Consumes 16-bit number, returns array of 16 bits $
func numTo16Bits()(num)
    let bits = []
    for (_ in [0 to 16])
        let bit = num % 2
	    num -= bit
        num /= 2
        push bit => bits
    rof
    unlet num = 0
return (bits)
