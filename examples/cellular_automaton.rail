$
USAGE
python railway.py examples/cellular_automaton.rail

This program implements a reversible cellular automaton called 'critters'. The
grid is segmented into 2x2 blocks of cells (wrapped at the grid edge) which
alternate between starting at (0,0) and (1,1) each timestep. At each timestep
the live cell count in each block can be from 0 to 4. If the count is 2, every
cell in the block flips state. If the sum is a special value (which alternates
between 1 and 3 each timestep) the block is rotated 180 degrees. Otherwise the
block is unchanged.

Because this cellular automaton is invertible (unlike the more famous Conway's
Game of Life) the grid update function in this program can operate in place
and still be invertible. This program runs the update forwards for a while,
making the critters scatter into randomness, then runs time backwards so that
they reverse into their original structure. I would have done this with a
do-undo structure, but we always want the draw function to run forwards. If it
ran backwards it would print the grid upside-down and back-to-front. Hence the
forwards and backwards runs are both for loops with time running forwards.

This program demonstrates a monodirectional function (.draw), and a do-yield-undo
where the yield block modifies the variables used in the do block ('grid' is
modified even though it is used to compute 'sum'). It also uses swap to move
cells in the grid in place.
$




global grid = [\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0],\
[0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0],\
[0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

global w = #grid[0]
global h = #grid

global n = 20


func main(argv)()
    for (i in [0 to n])
        call update(grid)
        call .draw(grid, w, h)
    rof
    for (i in [n to 0 by -1])
        uncall update(grid)
        call .draw(grid, w, h)
    rof
return ()


func update(grid)()
    for (transform_type in [1, 3])
        $ Iterate over the top left corner of the 2x2 blocks $
        let offset = transform_type == 3
        for (x in [offset to w by 2])
            for (y in [offset to h by 2])
                call transform(grid, x, y, transform_type)
            rof
        rof
        unlet offset = transform_type == 3
    rof
return ()


func transform(grid, x, y, transform_type)()
    do
        $ Compute coords for block, wrap at grid edges $
        let up = (y + 1) % h
        let right = (x + 1) % w

        $ Block transform is determined by the sum of the cells $
        let sum = grid[y][x]
        sum += grid[y][right]
        sum += grid[up][x]
        sum += grid[up][right]
    yield
        if (sum == 2)
            $ Flip every cell in the block, 0 <-> 1 $
            grid[y][x] *= -1
            grid[y][x] += 1
            grid[up][x] *= -1
            grid[up][x] += 1
            grid[y][right] *= -1
            grid[y][right] += 1
            grid[up][right] *= -1
            grid[up][right] += 1
        fi ()
        if (sum == transform_type)
            $ Rotate block 180 $
            swap grid[y][x] <=> grid[up][right]
            swap grid[y][right] <=> grid[up][x]
        fi ()
    undo
return ()


func .draw(grid, width, height)()
    for (.y in [0 to height])
        print('|')
        for (.x in [0 to width])
            if (grid[.y][.x])
                 print('O')
            else
                print(' ')
            fi ()
        rof
        println('|')
    rof
    print('+')
    for (._ in [0 to width])
      print('-')
    rof
    println('+')
return ()
