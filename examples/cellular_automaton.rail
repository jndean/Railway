
global grid = [\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0],\
[0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0],\
[0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0],\
[0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

global w = #grid[0]
global h = #grid
global offset

global n = 30


func main(argv)()
    for (i in [0 to n])
        println(">>> FORWARDS (", i, ") >>>")
        call update(grid)
        call draw(grid, w, h)
    rof
    for (i in [n to 0 by -1])
        println("<<< BACKWARDS (", i, ") <<<")
        uncall update(grid)
        call draw(grid, w, h)
    rof
    println("### DONE ###")
return ()


func update(grid)()
    for (transform_type in [1, 3])
        $ Iterate over the top left corner of the 2x2 blocks $
        for (x in [offset to w by 2])
            for (y in [offset to h by 2])
                call transform(grid, x, y, transform_type)
            rof
        rof
    rof

    $ Apply the transposition (0 <-> 1) to offset $
    offset *= -1
    offset += 1
return ()


func transform(grid, x, y, transform_type)()
    do
        $ Compute coords for block, wrap at grid edges $
        let up = (y + 1) % h
        let right = (x + 1) % w

        $ Block transform is determined by the sum of the cells $
        let sum = grid[y][x]
        sum += grid[y][right]
        sum += grid[up][x]
        sum += grid[up][right]
    yield
        if (sum == 2)
            $ Flip every cell in the block $
            grid[y][x] *= -1
            grid[y][x] += 1
            grid[up][x] *= -1
            grid[up][x] += 1
            grid[y][right] *= -1
            grid[y][right] += 1
            grid[up][right] *= -1
            grid[up][right] += 1
        fi ()
        if (sum == transform_type)
            $ Rotate block 180 $
            swap grid[y][x] <=> grid[up][right]
            swap grid[y][right] <=> grid[up][x]
        fi ()
    undo
return ()


func draw(grid, width, height)()
    for (y in [0 to height])
        print("|")
        for (x in [0 to width])
            if (grid[y][x])
                 print("O")
            else
                print(" ")
            fi ()
        rof
        println("|")
    rof
    print("+")
    for (_ in [0 to width])
      print("-")
    rof
    println("+")
    let nonmono
    unlet nonmono
return ()