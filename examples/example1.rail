

func F {x}
  x *= 2
  let y = x * 3
  x += y
return x

func G {}
  let x = 0

  let i = 0
  loop i = 0
    x += i
    i += 1
  until i = 5
  unlet i = 5

  for i = 0
    x += i
    i += 1
  until i = 5

undoreturn x


func STEP {val1 val2 step thresh}
  try scale = 1 , 1/2 , 1/3
    step *= scale
    val1 += step
    val2 += step
    if val1 < val2
      catch ((val1 / val2) - 1) < thresh
    else
      catch ((val2 / val1) - 1) < thresh
    fi val1 < val2
  yrt
return scale


func main {argc argv}
  let x = 1
  let y = 2
  x += y
  x += 2 * (y + 1)
  unlet x = 7
  unlet y = 2

  call x = G{}

  do
    let i = 1
    let x = 3 * i
   yield
     y += x
   undo
return
