

func matmul_threaded(L, R)
  let out[0]
  for (R_col in [0 to #R[0]])
    let sum = 0
    for (R_row in [0 to #R])
      sum += L[THREAD_ID][R_col] * R[R_row][R_col]
    rof ()
    push sum => out
  rof ()
return


func ~argmax(X)
  let range = [i for i in [0 to #X]]
  try (best in range)
    for (i in [0 to #X])
      catch (X[i] > X[best])
    rof ()
  yrt
  unlet range = [i for i in [0 to #X]]
return best

	
func argmax_alt(X)
  let .best = 0
  for (i = 0)
    if (X[i] > X[.best])
      .best = i
    fi
  rof (#X)
return .best

	
func main(argv)
  do
    let M[5][5] = 5/6
    let V[5][2] = 1
    call{5} X = matmul_threaded(M, V)
  yield
    print(X)
  undo
return
